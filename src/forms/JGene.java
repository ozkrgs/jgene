/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forms;

import clases.Campo;
import clases.CamposTableModel;
import clases.Conexion;
import clases.Directorio;
import clases.PaqueteDirectorio;
import connection.Connector;
import exceptions.ExceptionConnection;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;
import org.xml.sax.SAXException;
import utils.ConfConexion;
import utils.ConfDirectorio;
import utils.Utilitarios;

/**
 *
 * @author Oscar Gomez da Silva
 */
public class JGene extends javax.swing.JFrame {

    private ArrayList<Conexion> listaConex;
    ArrayList<PaqueteDirectorio> listaPaqueteDirectorios;
    private Conexion conexionActiva;
    private PaqueteDirectorio paqueteDirectorioActivo;
    private String directorio;
    ArrayList<Campo> listaCampos = new ArrayList<Campo>();
    private String nombreTabla;
    private String nombreEntidad;
    StringBuilder i18n = new StringBuilder();

    public JGene() throws ExceptionConnection {
        initComponents();
//        txtEntidad.setEnabled(false);
//        txtTitulo.setEnabled(false);
        // txtPaquete.setEnabled(false);
        // btnGenerar.setEnabled(false);
        btnNuevoCampo.setEnabled(false);

        Conexion conexionActiva = new Conexion();
        try {
            buscaConexiones();
            buscaDirectorios();
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(JGene.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TransformerException ex) {
            Logger.getLogger(JGene.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cboRelacion = new javax.swing.JComboBox();
        cboTipoAtributo = new javax.swing.JComboBox();
        cboTipoComponente = new javax.swing.JComboBox();
        fchDirectorio = new javax.swing.JFileChooser();
        TipoBeanbuttonGroup = new javax.swing.ButtonGroup();
        pestanasTabPanel = new javax.swing.JTabbedPane();
        conexionPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListConexiones = new javax.swing.JList();
        btnNuevaConexion = new javax.swing.JButton();
        btnGuardarConexion = new javax.swing.JButton();
        btnEliminarConex = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txtNomConexion = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtURLConexion = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtUsuario = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtContrase単a = new javax.swing.JPasswordField();
        AtributoPanel = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        btnNuevoCampo = new javax.swing.JButton();
        archivosPanel = new javax.swing.JPanel();
        chkDomain = new javax.swing.JCheckBox();
        chkRepository = new javax.swing.JCheckBox();
        chkService = new javax.swing.JCheckBox();
        chkBean = new javax.swing.JCheckBox();
        chkLovBean = new javax.swing.JCheckBox();
        chkEditForm = new javax.swing.JCheckBox();
        chkListForm = new javax.swing.JCheckBox();
        chkScripts = new javax.swing.JCheckBox();
        rbCrud = new javax.swing.JRadioButton();
        rbAser = new javax.swing.JRadioButton();
        txtDirDomain = new javax.swing.JTextField();
        btnFChDomain = new javax.swing.JButton();
        txtDirRepository = new javax.swing.JTextField();
        btnFChRepository = new javax.swing.JButton();
        txtDirService = new javax.swing.JTextField();
        btnFChService = new javax.swing.JButton();
        txtDirBean = new javax.swing.JTextField();
        btnFChBean = new javax.swing.JButton();
        txtDirLOVBean = new javax.swing.JTextField();
        btnFChLOVBeaN = new javax.swing.JButton();
        txtDirEditForm = new javax.swing.JTextField();
        btnFChEditForm = new javax.swing.JButton();
        txtDirListForm = new javax.swing.JTextField();
        btnFChListForm = new javax.swing.JButton();
        txtDirScript = new javax.swing.JTextField();
        btnFChScript = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListDirectorios = new javax.swing.JList();
        btnPaqueteDirectorio = new javax.swing.JButton();
        btnGuardarConfArch = new javax.swing.JButton();
        btnEliminarPaqueteDir = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        txtPaquete = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        txtTabla = new javax.swing.JTextField();
        txtEntidad = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtTitulo = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnBuscar = new javax.swing.JButton();
        btnGenerar = new javax.swing.JToggleButton();

        cboRelacion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "N/A", "@OneToOne", "@OneToMany", "@ManyToOne", "@ManyToOne(Maestro)", "@Transient" }));

        cboTipoAtributo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "String", "int", "Date", "double", "float" }));

        cboTipoComponente.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "N/A", "p:inputText", "sdkuna:inputTextArea", "una:inputNumber", "components:inputTextArea", "p:spinner", "p:selectBooleanCheckbox", "p:selectOneMenu", "p:autoComplete", "p:calendar", "components:detailNoEditTableHorizontal", "p:editor" }));

        fchDirectorio.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        fchDirectorio.setToolTipText("");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pestanasTabPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jListConexiones.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListConexiones.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListConexionesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jListConexiones);

        btnNuevaConexion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ui-document.png"))); // NOI18N
        btnNuevaConexion.setToolTipText("Nueva");
        btnNuevaConexion.setMaximumSize(new java.awt.Dimension(61, 29));
        btnNuevaConexion.setMinimumSize(new java.awt.Dimension(61, 29));
        btnNuevaConexion.setName("btnNuevaConexion"); // NOI18N
        btnNuevaConexion.setPreferredSize(new java.awt.Dimension(35, 23));
        btnNuevaConexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevaConexionnuevaConexion(evt);
            }
        });

        btnGuardarConexion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ui-save.png"))); // NOI18N
        btnGuardarConexion.setToolTipText("Guardar");
        btnGuardarConexion.setPreferredSize(new java.awt.Dimension(25, 25));
        btnGuardarConexion.setRolloverEnabled(false);
        btnGuardarConexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarConexionActionPerformed(evt);
            }
        });

        btnEliminarConex.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ui-trash.png"))); // NOI18N
        btnEliminarConex.setToolTipText("Eliminar");
        btnEliminarConex.setName("btnEliminarConexion"); // NOI18N
        btnEliminarConex.setNextFocusableComponent(AtributoPanel);
        btnEliminarConex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarConexActionPerformed(evt);
            }
        });

        jLabel8.setText("Nombre");

        jLabel5.setText("URL");

        jLabel6.setText("Usuario");

        txtUsuario.setNextFocusableComponent(txtContrase単a);

        jLabel7.setText("Contrase単a");

        txtContrase単a.setNextFocusableComponent(btnNuevaConexion);

        org.jdesktop.layout.GroupLayout conexionPanelLayout = new org.jdesktop.layout.GroupLayout(conexionPanel);
        conexionPanel.setLayout(conexionPanelLayout);
        conexionPanelLayout.setHorizontalGroup(
            conexionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, conexionPanelLayout.createSequentialGroup()
                .add(160, 160, 160)
                .add(conexionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(conexionPanelLayout.createSequentialGroup()
                        .add(btnNuevaConexion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(btnGuardarConexion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(btnEliminarConex, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(31, 31, 31)
                .add(conexionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel7)
                    .add(jLabel6)
                    .add(jLabel5)
                    .add(jLabel8))
                .add(34, 34, 34)
                .add(conexionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, txtUsuario)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, txtURLConexion, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, txtNomConexion, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, txtContrase単a, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE))
                .add(158, 158, 158))
        );
        conexionPanelLayout.setVerticalGroup(
            conexionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(conexionPanelLayout.createSequentialGroup()
                .add(83, 83, 83)
                .add(conexionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(conexionPanelLayout.createSequentialGroup()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 122, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(conexionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(btnEliminarConex, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 35, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(btnNuevaConexion, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(btnGuardarConexion, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .add(conexionPanelLayout.createSequentialGroup()
                        .add(conexionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel8)
                            .add(txtNomConexion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(18, 18, 18)
                        .add(conexionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(txtURLConexion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(18, 18, 18)
                        .add(conexionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(txtUsuario, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel6))
                        .add(18, 18, 18)
                        .add(conexionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(txtContrase単a, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel7))))
                .addContainerGap(163, Short.MAX_VALUE))
        );

        pestanasTabPanel.addTab("Conexi坦n", conexionPanel);

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Campo", "Tipo", "Tama単o", "Atributo", "Tipo Atributo", "Relaci坦n", "componente", "Etiqueta"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable4.setToolTipText("");
        jTable4.setColumnSelectionAllowed(true);
        jTable4.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(jTable4);
        jTable4.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        btnNuevoCampo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ui-plus.png"))); // NOI18N
        btnNuevoCampo.setToolTipText("Insertar Campo");
        btnNuevoCampo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoCampoActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout AtributoPanelLayout = new org.jdesktop.layout.GroupLayout(AtributoPanel);
        AtributoPanel.setLayout(AtributoPanelLayout);
        AtributoPanelLayout.setHorizontalGroup(
            AtributoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(AtributoPanelLayout.createSequentialGroup()
                .add(21, 21, 21)
                .add(AtributoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 940, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnNuevoCampo))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        AtributoPanelLayout.setVerticalGroup(
            AtributoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(AtributoPanelLayout.createSequentialGroup()
                .add(21, 21, 21)
                .add(btnNuevoCampo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 317, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pestanasTabPanel.addTab("Atributos", AtributoPanel);

        chkDomain.setSelected(true);
        chkDomain.setText("Domain");
        chkDomain.setName("chkDomain"); // NOI18N

        chkRepository.setSelected(true);
        chkRepository.setText("Repository");

        chkService.setSelected(true);
        chkService.setText("Service");

        chkBean.setSelected(true);
        chkBean.setText("Bean");

        chkLovBean.setSelected(true);
        chkLovBean.setText("LOVBean");

        chkEditForm.setSelected(true);
        chkEditForm.setText("EditForm");

        chkListForm.setSelected(true);
        chkListForm.setText("ListForm");

        chkScripts.setSelected(true);
        chkScripts.setText("Scripts SQL");

        TipoBeanbuttonGroup.add(rbCrud);
        rbCrud.setSelected(true);
        rbCrud.setText("CRUD");
        rbCrud.setName(""); // NOI18N

        TipoBeanbuttonGroup.add(rbAser);
        rbAser.setText("ASER");

        txtDirDomain.setInheritsPopupMenu(true);

        btnFChDomain.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ui-folder.png"))); // NOI18N
        btnFChDomain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFChDomainActionPerformed(evt);
            }
        });

        txtDirRepository.setToolTipText("");

        btnFChRepository.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ui-folder.png"))); // NOI18N
        btnFChRepository.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFChRepositoryActionPerformed(evt);
            }
        });

        btnFChService.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ui-folder.png"))); // NOI18N
        btnFChService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFChServiceActionPerformed(evt);
            }
        });

        btnFChBean.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ui-folder.png"))); // NOI18N
        btnFChBean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFChBeanActionPerformed(evt);
            }
        });

        btnFChLOVBeaN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ui-folder.png"))); // NOI18N
        btnFChLOVBeaN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFChLOVBeaNActionPerformed(evt);
            }
        });

        btnFChEditForm.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ui-folder.png"))); // NOI18N
        btnFChEditForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFChEditFormActionPerformed(evt);
            }
        });

        btnFChListForm.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ui-folder.png"))); // NOI18N
        btnFChListForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFChListFormActionPerformed(evt);
            }
        });

        btnFChScript.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ui-folder.png"))); // NOI18N
        btnFChScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFChScriptActionPerformed(evt);
            }
        });

        jLabel3.setText("Tipo de Bean");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel1.setToolTipText("");

        jListDirectorios.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListDirectorios.setName("jListDirectorio"); // NOI18N
        jListDirectorios.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListDirectoriosValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jListDirectorios);

        btnPaqueteDirectorio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ui-document.png"))); // NOI18N
        btnPaqueteDirectorio.setToolTipText("Nuevo");
        btnPaqueteDirectorio.setMaximumSize(new java.awt.Dimension(61, 29));
        btnPaqueteDirectorio.setMinimumSize(new java.awt.Dimension(61, 29));
        btnPaqueteDirectorio.setName("btnNuevaConexion"); // NOI18N
        btnPaqueteDirectorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPaqueteDirectorioActionPerformed(evt);
            }
        });

        btnGuardarConfArch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ui-save.png"))); // NOI18N
        btnGuardarConfArch.setToolTipText("Guardar");
        btnGuardarConfArch.setPreferredSize(new java.awt.Dimension(25, 25));
        btnGuardarConfArch.setRolloverEnabled(false);
        btnGuardarConfArch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarConfArchActionPerformed(evt);
            }
        });

        btnEliminarPaqueteDir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ui-trash.png"))); // NOI18N
        btnEliminarPaqueteDir.setToolTipText("Eliminar");
        btnEliminarPaqueteDir.setName("btnEliminarConexion"); // NOI18N
        btnEliminarPaqueteDir.setNextFocusableComponent(AtributoPanel);
        btnEliminarPaqueteDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarPaqueteDirActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(25, 25, 25)
                .add(btnPaqueteDirectorio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(51, 51, 51)
                .add(btnGuardarConfArch, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 52, Short.MAX_VALUE)
                .add(btnEliminarPaqueteDir, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(25, 25, 25))
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel1Layout.createSequentialGroup()
                    .add(25, 25, 25)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 217, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(25, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(btnPaqueteDirectorio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 35, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, btnGuardarConfArch, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 35, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, btnEliminarPaqueteDir, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 35, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(79, 79, 79))
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel1Layout.createSequentialGroup()
                    .add(78, 78, 78)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 122, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(122, Short.MAX_VALUE)))
        );

        jLabel9.setText("Paquete");

        txtPaquete.setToolTipText("");
        txtPaquete.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtPaquete.setNextFocusableComponent(conexionPanel);

        org.jdesktop.layout.GroupLayout archivosPanelLayout = new org.jdesktop.layout.GroupLayout(archivosPanel);
        archivosPanel.setLayout(archivosPanelLayout);
        archivosPanelLayout.setHorizontalGroup(
            archivosPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(archivosPanelLayout.createSequentialGroup()
                .add(51, 51, 51)
                .add(archivosPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(archivosPanelLayout.createSequentialGroup()
                        .add(jLabel3)
                        .add(45, 45, 45)
                        .add(rbCrud)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(rbAser)
                        .addContainerGap(679, Short.MAX_VALUE))
                    .add(archivosPanelLayout.createSequentialGroup()
                        .add(archivosPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel9)
                            .add(archivosPanelLayout.createSequentialGroup()
                                .add(archivosPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(chkDomain)
                                    .add(chkRepository)
                                    .add(chkService)
                                    .add(chkBean)
                                    .add(chkLovBean)
                                    .add(chkEditForm)
                                    .add(chkListForm)
                                    .add(chkScripts))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 9, Short.MAX_VALUE)
                                .add(archivosPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(txtPaquete)
                                    .add(txtDirDomain)
                                    .add(txtDirRepository, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 469, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(txtDirService)
                                    .add(txtDirBean)
                                    .add(txtDirLOVBean)
                                    .add(txtDirEditForm)
                                    .add(txtDirListForm, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
                                    .add(txtDirScript, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 467, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(18, 18, 18)
                                .add(archivosPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(btnFChDomain, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(btnFChRepository, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(btnFChService, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(btnFChBean, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(btnFChLOVBeaN, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(btnFChEditForm, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(btnFChListForm, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(btnFChScript, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                        .add(19, 19, 19)
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(25, 25, 25))))
        );
        archivosPanelLayout.setVerticalGroup(
            archivosPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, archivosPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(archivosPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, archivosPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(rbCrud)
                        .add(rbAser))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel3))
                .add(18, 18, 18)
                .add(archivosPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(archivosPanelLayout.createSequentialGroup()
                        .add(archivosPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel9)
                            .add(txtPaquete))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 20, Short.MAX_VALUE)
                        .add(archivosPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(btnFChDomain, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(archivosPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(chkDomain)
                                .add(txtDirDomain, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(archivosPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(archivosPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(chkRepository)
                                .add(txtDirRepository, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(btnFChRepository, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(archivosPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(archivosPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(chkService)
                                .add(txtDirService, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(btnFChService, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(archivosPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(txtDirBean, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(chkBean)
                            .add(btnFChBean, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(archivosPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(txtDirLOVBean, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(chkLovBean)
                            .add(btnFChLOVBeaN, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(13, 13, 13)
                        .add(archivosPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(archivosPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(chkEditForm)
                                .add(txtDirEditForm, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(btnFChEditForm, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(archivosPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(txtDirListForm, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(btnFChListForm, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(chkListForm))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(archivosPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(txtDirScript, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(chkScripts)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, btnFChScript, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(31, 31, 31))
        );

        pestanasTabPanel.addTab("Archivos", archivosPanel);

        jLabel12.setText("Tabla a generar:");

        txtTabla.setToolTipText("");

        txtEntidad.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtEntidad.setToolTipText("");

        jLabel2.setText("Nombre de la Entidad:");

        jLabel1.setText("Titulo");

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ui-search.png"))); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.setName("btnBuscar"); // NOI18N
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnGenerar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ui-process.png"))); // NOI18N
        btnGenerar.setText("Generar");
        btnGenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(37, 37, 37)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel12)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel2))
                .add(24, 24, 24)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, txtTitulo)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, txtEntidad)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, txtTabla, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 475, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(38, 38, 38)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(btnGenerar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                    .add(btnBuscar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(69, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(25, 25, 25)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel12, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(txtTabla, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnBuscar))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(txtEntidad, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnGenerar))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(txtTitulo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(pestanasTabPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 995, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pestanasTabPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 440, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void buscaConexiones() throws ParserConfigurationException, TransformerException {
        ConfConexion conf = new ConfConexion();
        listaConex = new ArrayList<>();
        listaConex = conf.listaConexiones();
        DefaultListModel listModel = new DefaultListModel();
        Iterator iterador = listaConex.listIterator();
        while (iterador.hasNext()) {
            Conexion cnx = (Conexion) iterador.next();
            listModel.addElement(cnx.getNombre());
        }
        jListConexiones.setModel(listModel);
    }

    public void buscaDirectorios() throws ParserConfigurationException, TransformerException {
        ConfDirectorio conf = new ConfDirectorio();
        listaPaqueteDirectorios = new ArrayList<>();
        listaPaqueteDirectorios = conf.listaPaqueteDirectorio();
        DefaultListModel listModel = new DefaultListModel();
        Iterator iterador = listaPaqueteDirectorios.listIterator();
        while (iterador.hasNext()) {
            PaqueteDirectorio pkg = (PaqueteDirectorio) iterador.next();
            listModel.addElement(pkg.getNombre());
        }
        jListDirectorios.setModel(listModel);
    }


    private void jListConexionesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListConexionesValueChanged
        if (!listaConex.isEmpty()) {
            Iterator iterador = listaConex.listIterator();
            JList list = (JList) evt.getSource();
            String selected = list.getSelectedValue().toString();
            while (iterador.hasNext()) {
                Conexion cnx = (Conexion) iterador.next();
                if (cnx.getNombre() == selected) {
                    conexionActiva = cnx;
                }
            }
            actualizaConexion();
        }
    }//GEN-LAST:event_jListConexionesValueChanged

    public void limpiaConexion() {
        jListConexiones.setSelectedIndex(1);
        txtNomConexion.setText("");
        txtURLConexion.setText("");
        txtUsuario.setText("");
        txtContrase単a.setText("");
        jListConexiones.indexToLocation(1);
    }

    public void limpiaPaqueteDirectorio() {
        jListDirectorios.setSelectedIndex(1);
        txtPaquete.setText("");
        txtDirDomain.setText("");
        txtDirRepository.setText("");
        txtDirService.setText("");
        txtDirBean.setText("");
        txtDirLOVBean.setText("");
        txtDirListForm.setText("");
        txtDirEditForm.setText("");
        txtDirScript.setText("");

    }

    public void actualizaConexion() {
        txtNomConexion.setText(conexionActiva.getNombre());
        txtURLConexion.setText(conexionActiva.getURL());
        txtUsuario.setText(conexionActiva.getUsuario());
        txtContrase単a.setText(conexionActiva.getContrasena());
    }

    public void actualizaPaqueteDirectorio() {
        txtPaquete.setText(paqueteDirectorioActivo.getNombre());
        txtDirDomain.setText(paqueteDirectorioActivo.getDirectorios().get(0).getRuta());
        txtDirRepository.setText(paqueteDirectorioActivo.getDirectorios().get(1).getRuta());
        txtDirService.setText(paqueteDirectorioActivo.getDirectorios().get(2).getRuta());
        txtDirBean.setText(paqueteDirectorioActivo.getDirectorios().get(3).getRuta());
        txtDirLOVBean.setText(paqueteDirectorioActivo.getDirectorios().get(4).getRuta());
        txtDirListForm.setText(paqueteDirectorioActivo.getDirectorios().get(5).getRuta());
        txtDirEditForm.setText(paqueteDirectorioActivo.getDirectorios().get(6).getRuta());
        txtDirScript.setText(paqueteDirectorioActivo.getDirectorios().get(7).getRuta());
    }

    public void asignaConexion(Conexion conexion) {//asigna los valor de los txt y los asigna a la conexion enviada
        conexion.setNombre(txtNomConexion.getText());
        conexion.setURL(txtURLConexion.getText());
        conexion.setUsuario(txtUsuario.getText());
        conexion.setContrasena(txtContrase単a.getText());
    }

    public void asignaDirectorio(PaqueteDirectorio paqueteDirectorio) {//asigna los valor de los txt y los asigna a la conexion enviada
        ArrayList<Directorio> directorios = new ArrayList<>();
        paqueteDirectorio.setNombre(txtPaquete.getText());
        Directorio directorio = new Directorio("domain", txtDirDomain.getText());
        directorios.add(directorio);
        directorio = new Directorio("repository", txtDirRepository.getText());
        directorios.add(directorio);
        directorio = new Directorio("service", txtDirService.getText());
        directorios.add(directorio);
        directorio = new Directorio("bean", txtDirBean.getText());
        directorios.add(directorio);
        directorio = new Directorio("LOVBean", txtDirLOVBean.getText());
        directorios.add(directorio);
        directorio = new Directorio("listForm", txtDirListForm.getText());
        directorios.add(directorio);
        directorio = new Directorio("editForm", txtDirEditForm.getText());
        directorios.add(directorio);
        directorio = new Directorio("SQL", txtDirScript.getText());
        directorios.add(directorio);
        paqueteDirectorio.setDirectorios(directorios);
    }

    private void Buscar() throws ExceptionConnection {
        Connector oconnector = new Connector();
        oconnector.inicializarDataSource(txtUsuario.getText(), txtContrase単a.getText(), txtURLConexion.getText());
        PreparedStatement stm = null;

        try {
            if (!txtTabla.getText().trim().equals("")) {
                nombreTabla = txtTabla.getText();
                nombreEntidad = Utilitarios.convierteNombre(nombreTabla.toLowerCase());
                txtEntidad.setText(Utilitarios.firstLetterUpper(nombreEntidad));
                listaCampos = new ArrayList<>();
                CamposTableModel model1 = new CamposTableModel(listaCampos);
                jTable4.setModel(model1);

                if (oconnector.openConnection()) {
                    stm = (PreparedStatement) oconnector.getConexion().prepareStatement(SQLColumnas());
                    stm.setString(1, nombreTabla);

                    try {
                        ResultSet resultset2 = stm.executeQuery();
                        while (resultset2.next()) {
                            Campo campo = new Campo();
                            campo.setSelected(false);
                            campo.setNombreCampo(resultset2.getString("column_name").toLowerCase());
                            campo.setTipoCampo(resultset2.getString("data_type"));
                            campo.setNombreAtributo(Utilitarios.convierteNombre(campo.getNombreCampo().toLowerCase()));
                            campo.setTipoAtributo(Utilitarios.tipoDato(campo.getTipoCampo()));
                            campo.setTipoRelacion("N/A");
                            campo.setComponente("N/A");
                            campo.setTamanno(resultset2.getInt("data_length"));
                            listaCampos.add(campo);
                        }
                        CamposTableModel model = new CamposTableModel(listaCampos);

                        jTable4.setModel(model);
                        if (jTable4.getColumnModel().getColumnCount() > 0) {
                            jTable4.getColumnModel().getColumn(0).setResizable(false);
                            jTable4.getColumnModel().getColumn(0).setPreferredWidth(5);
                            jTable4.getColumnModel().getColumn(2).setPreferredWidth(30);
                            jTable4.getColumnModel().getColumn(3).setPreferredWidth(10);
                            jTable4.getColumnModel().getColumn(4).setPreferredWidth(110);
                            jTable4.getColumnModel().getColumn(5).setPreferredWidth(30);
                            jTable4.getColumnModel().getColumn(6).setCellEditor(new javax.swing.DefaultCellEditor(cboRelacion));
                            jTable4.getColumnModel().getColumn(7).setPreferredWidth(170);
                            jTable4.getColumnModel().getColumn(7).setCellEditor(new javax.swing.DefaultCellEditor(cboTipoComponente));
                        }
                        if (resultset2.getRow() >= 1) {
                            txtEntidad.setEnabled(true);
                            txtPaquete.setEnabled(true);
                            txtTitulo.setText(Utilitarios.convierteNombreTitulo(nombreTabla.toLowerCase()));
                            btnGenerar.setEnabled(true);
                            btnNuevoCampo.setEnabled(true);
                            txtTitulo.setEnabled(true);
                        } else {
                            JOptionPane.showMessageDialog(null, "No se encontr坦 la tabla");
                            txtEntidad.setEnabled(false);
                            txtPaquete.setEnabled(false);
                            btnGenerar.setEnabled(false);
                            txtTitulo.setEnabled(false);
                            btnNuevoCampo.setEnabled(false);
                        }
                    } catch (Exception e) {
                        throw new ExceptionConnection("Eror:" + e.toString(), 1, true, 3, "admisionDaoImpl");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "El nombre de la tabla es requerido");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
            throw new ExceptionConnection("Error:" + ex.toString(), 1, true, 3, "");
        } finally {
            if (stm != null) {
                try {
                    stm.close();
                    oconnector.closeConnection();
                } catch (SQLException sqlex) {
                    throw new ExceptionConnection("1008:" + "Error al cerrar statement", sqlex.toString(), 1, true, 3, "admisionDaoImpl");
                }//
            }//

        }//
    }

    private void Generar() throws ExceptionConnection {
        Boolean check = false;
        int rows = jTable4.getModel().getRowCount();
        listaCampos = new ArrayList<>();
        nombreEntidad = txtEntidad.getText();
        i18n = new StringBuilder();
        for (int i = 0; i < rows; i++) {//recorre el modelo y llena nuevamente listaCAmpos con los datos personalizados
            if (jTable4.getModel().getValueAt(i, 0) != null) {
                check = (Boolean) jTable4.getModel().getValueAt(i, 0);
                if (check) {
                    Campo campo = new Campo();
                    campo.setNombreCampo((String) jTable4.getModel().getValueAt(i, 1));
                    campo.setTipoCampo((String) jTable4.getModel().getValueAt(i, 2));
                    campo.setTamanno((Integer) jTable4.getModel().getValueAt(i, 3));
                    campo.setNombreAtributo((String) jTable4.getModel().getValueAt(i, 4));
                    campo.setTipoAtributo((String) jTable4.getModel().getValueAt(i, 5));
                    campo.setTipoRelacion((String) jTable4.getModel().getValueAt(i, 6));
                    campo.setComponente((String) jTable4.getModel().getValueAt(i, 7));
                    campo.setEtiqueta((String) jTable4.getModel().getValueAt(i, 8));
                    listaCampos.add(campo);
                }
            }
        }

        if (chkDomain.isSelected()) {
            GenerarEntidad();
        }
        if (chkRepository.isSelected()) {
            GenerarRepository();
        }
        if (chkService.isSelected()) {
            GenerarService();
            GenerarServiceImpl();
        }
        if (chkBean.isSelected()) {
            if (rbCrud.isSelected()) {
                GenerarModelBeanCRUD();
            } else {
                GenerarModelBeanASER();
            }
        }
        if (chkLovBean.isSelected()) {
            GenerarModelLOVBean();
        }
        if (chkListForm.isSelected()) {
            GenerarListForm();
        }
        if (chkEditForm.isSelected()) {
            GenerarEditForm();
        }
        if (chkScripts.isSelected()) {
            GenerarInternacionalizacion();
        }

        JOptionPane.showMessageDialog(null, "Archivos creados exitosamente!");

    }

    // <editor-fold defaultstate="collapsed" desc="Generadores"> 
    public void GenerarEntidad() {
        FileWriter fichero = null;
        PrintWriter pw = null;
        String ruta = "";
        try {
            ruta = txtDirDomain.getText() + nombreEntidad + ".java";
            fichero = new FileWriter(ruta);
            pw = new PrintWriter(fichero);
            pw.println("package " + txtPaquete.getText() + ".domain;");
            pw.println("import cr.ac.una.cgi.sdkuna.domain.CampoConfigurable;");
            pw.println("import cr.ac.una.cgi.sdkuna.domain.Usuario;");
            pw.println("import cr.ac.una.cgi.sdkuna.generic.BaseEntity;");
            pw.println("import javax.persistence.AttributeOverride;");
            pw.println("import javax.persistence.Column;");
            pw.println("import javax.persistence.Entity;");
            pw.println("import javax.persistence.SequenceGenerator;");
            pw.println("import javax.persistence.Table;");
            pw.println("import javax.persistence.FetchType;");
            pw.println("import javax.persistence.JoinColumn;");
            pw.println("import javax.persistence.ManyToOne;");
            pw.println("import javax.persistence.OneToOne;");
            pw.println("import javax.persistence.OneToMany;");
            pw.println("import javax.persistence.Transient;");

            pw.println("/** \n* @author JGene \n* @since " + generarFechaActual() + " \n* @version 0.0.1 \n*/");

            pw.println("@Entity");
            pw.println("@Table(name = \"" + nombreTabla + "\")");
            pw.println("@AttributeOverride(name = \"id\", column =@Column(name = \"ID_" + nombreTabla + "\"))");
            pw.println("@SequenceGenerator(name = \"sequence\", sequenceName = \"SQ_" + nombreTabla + "\", allocationSize = 1)");

            pw.println("public class " + nombreEntidad + " extends BaseEntity<Usuario, CampoConfigurable> {");
            if (!listaCampos.isEmpty()) {
                Iterator iterador = listaCampos.listIterator(); //Le solicito a la lista que me devuelva un iterador con todos los el elementos contenidos en ella
                while (iterador.hasNext()) {
                    Campo c = (Campo) iterador.next(); //Obtengo el elemento contenido                     

                    switch (c.getTipoRelacion()) {
                        case "@OneToOne":
                            pw.println("@OneToOne");
                            pw.println("@JoinColumn(name=\"" + c.getNombreCampo().toUpperCase() + "\")");
                            pw.println("private " + c.getTipoAtributo() + " " + c.getNombreAtributo() + ";");
                            break;
                        case "@OneToMany":
                            pw.println("@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true)");
                            pw.println("@JoinColumn(name = \"" + nombreTabla.toUpperCase() + "\", nullable = false)");
                            pw.println("private List<" + c.getTipoAtributo() + "> " + c.getNombreAtributo() + ";");
                            break;
                        case "@ManyToOne":
                            pw.println("@ManyToOne(fetch = FetchType.LAZY)");
                            pw.println("@JoinColumn(name=\"" + c.getNombreCampo().toUpperCase() + "\")");
                            pw.println("private " + c.getTipoAtributo() + " " + c.getNombreAtributo() + ";");
                            break;
                        case "@ManyToOne(Maestro)":
                            pw.println("@ManyToOne(fetch = FetchType.LAZY, optional = false)");
                            pw.println("@JoinColumn(name=\"" + c.getNombreCampo().toUpperCase() + "\",referencedColumnName=\"ID_" + c.getNombreCampo().toUpperCase() + "\",nullable = false,insertable = false,updatable = false)");
                            pw.println("private " + c.getTipoAtributo() + " " + c.getNombreAtributo() + ";");
                            break;
                        case "@Transient":
                            pw.println("@Transient");
                            pw.println("private " + c.getTipoAtributo() + " " + c.getNombreAtributo() + ";");
                            break;
                        default:
                            pw.println("@Column(name=\"" + c.getNombreCampo().toUpperCase() + "\")");
                            pw.println("private " + c.getTipoAtributo() + " " + c.getNombreAtributo() + ";");
                            break;
                    }
                    pw.println("");
                }
                pw.println("");
                pw.println("public " + nombreEntidad + "() {}");//
                pw.println("");
                iterador = listaCampos.listIterator();
                while (iterador.hasNext()) {
                    Campo c = (Campo) iterador.next(); //Obtengo el elemento contenido                     
                    pw.println("public " + c.getTipoAtributo() + " get" + Utilitarios.firstLetterUpper(c.getNombreAtributo()) + "(){");
                    pw.println("return " + c.getNombreAtributo() + ";");
                    pw.println("}");
                    pw.println("");
                    pw.println("public void set" + Utilitarios.firstLetterUpper(c.getNombreAtributo()) + "(" + c.getTipoAtributo() + " " + c.getNombreAtributo() + "){");
                    pw.println("this." + c.getNombreAtributo() + "=" + c.getNombreAtributo() + ";");
                    pw.println("}");
                    pw.println("");
                }
            }
            pw.println("}");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString());
        } finally {
            try {
                // Nuevamente aprovechamos el finally para 
                // asegurarnos que se cierra el fichero.
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                JOptionPane.showMessageDialog(null, e2.toString());
            }
        }
    }

    public void GenerarRepository() {
        FileWriter fichero = null;
        PrintWriter pw = null;
        String ruta = "";
        try {
            ruta = txtDirRepository.getText() + nombreEntidad + "Repository.java";
            fichero = new FileWriter(ruta);
            pw = new PrintWriter(fichero);
            pw.println("package " + txtPaquete.getText() + ".repository;");
            pw.println("import " + txtPaquete.getText() + ".domain." + nombreEntidad + ";");
            pw.println("import cr.ac.una.cgi.sdkuna.generic.GenericRepository;");
            pw.println("import org.springframework.stereotype.Repository;");

            pw.println("/** \n* @author JGene \n* @since " + generarFechaActual() + " \n* @version 0.0.1 \n*/");

            pw.println("@Repository");
            pw.println("public interface " + nombreEntidad + "Repository extends GenericRepository<" + nombreEntidad + "> {");
            pw.println("}");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString());
        } finally {
            try {
                // Nuevamente aprovechamos el finally para 
                // asegurarnos que se cierra el fichero.
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                JOptionPane.showMessageDialog(null, e2.toString());
            }
        }
    }

    public void GenerarService() {
        FileWriter fichero = null;
        PrintWriter pw = null;
        String ruta = "";
        try {
            ruta = txtDirService.getText() + nombreEntidad + "Service.java";
            fichero = new FileWriter(ruta);
            pw = new PrintWriter(fichero);
            pw.println("package " + txtPaquete.getText() + ".service;");
            pw.println("import  " + txtPaquete.getText() + ".domain." + nombreEntidad + ";");
            pw.println("import cr.ac.una.cgi.sdkuna.api.service.EntityService;");
            pw.println("import java.util.List;");

            pw.println("/** \n* @author JGene \n* @since " + generarFechaActual() + " \n* @version 0.0.1 \n*/");

            pw.println("public interface " + nombreEntidad + "Service extends EntityService<" + nombreEntidad + "> {");
            pw.println("}");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString());
        } finally {
            try {
                // Nuevamente aprovechamos el finally para 
                // asegurarnos que se cierra el fichero.
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                JOptionPane.showMessageDialog(null, e2.toString());
            }
        }
    }

    public void GenerarServiceImpl() {
        FileWriter fichero = null;
        PrintWriter pw = null;
        String ruta = "";
        try {
            ruta = txtDirService.getText() + nombreEntidad + "ServiceImpl.java";
            fichero = new FileWriter(ruta);
            pw = new PrintWriter(fichero);
            pw.println("package " + txtPaquete.getText() + ".service;");
            pw.println("import " + txtPaquete.getText() + ".domain." + nombreEntidad + ";");
            pw.println("import " + txtPaquete.getText() + ".repository." + nombreEntidad + "Repository;");
            pw.println("import cr.ac.una.cgi.sdkuna.api.service.EntityServiceImpl;");
            pw.println("import java.util.List;");
            pw.println("import org.springframework.stereotype.Service;");
            pw.println("import org.springframework.transaction.annotation.Transactional;");
            pw.println("");
            pw.println("/** \n* @author JGene \n* @since " + generarFechaActual() + " \n* @version 0.0.1 \n*/");
            pw.println("");
            pw.println("@Service");
            pw.println("@Transactional");
            pw.println("public class " + nombreEntidad + "ServiceImpl extends EntityServiceImpl<" + nombreEntidad + ", " + nombreEntidad + "Repository> implements " + nombreEntidad + "Service {");
            pw.println("}");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString());
        } finally {
            try {
                // Nuevamente aprovechamos el finally para 
                // asegurarnos que se cierra el fichero.
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                JOptionPane.showMessageDialog(null, e2.toString());
            }
        }
    }

    public void GenerarModelBeanCRUD() {
        FileWriter fichero = null;
        PrintWriter pw = null;
        String ruta = "";
        try {
            ruta = txtDirBean.getText() + nombreEntidad + "Bean.java";
            fichero = new FileWriter(ruta);
            pw = new PrintWriter(fichero);

            pw.println("package " + txtPaquete.getText() + ".view.model;");
            pw.println("import " + txtPaquete.getText() + ".domain." + nombreEntidad + ";");
            pw.println("import " + txtPaquete.getText() + ".service." + nombreEntidad + "Service;");
            pw.println("import cr.ac.una.cgi.sdkuna.view.commons.CRUD;");
            pw.println("import cr.ac.una.cgi.sdkuna.view.commons.CRUDColumn;");
            pw.println("import cr.ac.una.cgi.sdkuna.view.commons.CRUDImpl;");
            pw.println("import java.util.List;");
            pw.println("import java.util.ArrayList;");
            pw.println("import org.springframework.context.annotation.Scope;");
            pw.println("import org.springframework.data.domain.Page;");
            pw.println("import org.springframework.data.domain.Pageable;");
            pw.println("import org.springframework.stereotype.Component;");
            pw.println("import javax.annotation.PostConstruct;");

            pw.println("/** \n* @author JGene \n* @since " + generarFechaActual() + " \n* @version 0.0.1 \n*/");

            pw.println("@Component");
            pw.println("@Scope(\"session\")");
            pw.println("public class " + nombreEntidad + "Bean extends CRUDImpl<" + nombreEntidad + ", " + nombreEntidad + "Service> implements CRUD{");

            pw.println("");
            pw.println("@PostConstruct");
            pw.println("public void init(){");
            pw.println("List<CRUDColumn> columns = new ArrayList();");
            if (!listaCampos.isEmpty()) {
                Iterator iterador = listaCampos.listIterator(); //Le solicito a la lista que me devuelva un iterador con todos los el elementos contenidos en ella
                Integer columNumber = 1;
                while (iterador.hasNext()) {
                    Campo c = (Campo) iterador.next(); //Obtengo el elemento contenido                     
                    pw.println("CRUDColumn column" + columNumber + " =new CRUDColumn(\"" + c.getNombreAtributo() + "\",getI18n(\"" + Utilitarios.firstLetterLower(nombreEntidad) + "_" + c.getNombreAtributo() + "_label\"),true);");
                    columNumber += 1;
                }
                columNumber = 1;
                iterador = listaCampos.listIterator();
                while (iterador.hasNext()) {
                    Campo c = (Campo) iterador.next(); //Obtengo el elemento contenido                     
                    pw.println("columns.add(column" + columNumber + ");");
                    columNumber += 1;
                }
                pw.println("this.setTableColumns(columns);");
            }
            pw.println("}");
            pw.println("public Page<" + nombreEntidad + "> completo" + nombreEntidad + "(String query,String campo, Pageable pageable){");
            pw.println(" return service.findAutoComplete(query, campo, pageable);");
            pw.println("}");
            pw.println("}");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString());
        } finally {
            try {
                // Nuevamente aprovechamos el finally para 
                // asegurarnos que se cierra el fichero.
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                JOptionPane.showMessageDialog(null, e2.toString());
            }
        }
    }

    public void GenerarModelBeanASER() {
        FileWriter fichero = null;
        PrintWriter pw = null;
        String ruta = "";
        try {
            ruta = txtDirBean.getText() + nombreEntidad + "Bean.java";
            fichero = new FileWriter(ruta);
            pw = new PrintWriter(fichero);

            pw.println("package " + txtPaquete.getText() + ".view.model;");
            pw.println("import " + txtPaquete.getText() + ".domain." + nombreEntidad + ";");
            pw.println("import " + txtPaquete.getText() + ".service." + nombreEntidad + "Service;");
            pw.println("import cr.ac.una.cgi.sdkuna.view.commons.ASER;");
            pw.println("import cr.ac.una.cgi.sdkuna.view.commons.ASERColumn;");
            pw.println("import cr.ac.una.cgi.sdkuna.view.commons.ASERImpl;");
            pw.println("import java.util.List;");
            pw.println("import java.util.ArrayList;");
            pw.println("import org.springframework.context.annotation.Scope;");
            pw.println("import org.springframework.stereotype.Component;");
            pw.println("import javax.annotation.PostConstruct;");

            pw.println("/** \n* @author JGene \n* @since " + generarFechaActual() + " \n* @version 0.0.1 \n*/");

            pw.println("@Component");
            pw.println("@Scope(\"session\")");
            pw.println("public class " + nombreEntidad + "Bean extends ASERImpl<" + nombreEntidad + "> implements ASER{");

            pw.println("");
            pw.println("@PostConstruct");
            pw.println("public void init(){");
            pw.println("List<ASERColumn> columns = new ArrayList();");
            if (!listaCampos.isEmpty()) {
                Iterator iterador = listaCampos.listIterator(); //Le solicito a la lista que me devuelva un iterador con todos los el elementos contenidos en ella
                Integer columNumber = 1;

                while (iterador.hasNext()) {
                    Campo c = (Campo) iterador.next(); //Obtengo el elemento contenido                     
                    pw.println("ASERColumn column" + columNumber + " =new ASERColumn(\"" + c.getNombreAtributo() + "\",getI18n(\"" + Utilitarios.firstLetterLower(nombreEntidad) + "_" + c.getNombreAtributo() + "_label\"),true);");

                    columNumber += 1;
                }
                columNumber = 1;
                iterador = listaCampos.listIterator();
                while (iterador.hasNext()) {
                    Campo c = (Campo) iterador.next(); //Obtengo el elemento contenido                     
                    pw.println("columns.add(column" + columNumber + ");");
                    columNumber += 1;
                }
                pw.println("this.setColumnsDetails(columns);");

            }
            pw.println("}");
            pw.println("}");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString());
        } finally {
            try {
                // Nuevamente aprovechamos el finally para 
                // asegurarnos que se cierra el fichero.
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                JOptionPane.showMessageDialog(null, e2.toString());
            }
        }
    }

    public void GenerarModelLOVBean() {
        FileWriter fichero = null;
        PrintWriter pw = null;
        String ruta = "";
        try {
            ruta = txtDirLOVBean.getText() + nombreEntidad + "LOVBean.java";
            fichero = new FileWriter(ruta);
            pw = new PrintWriter(fichero);

            pw.println("package " + txtPaquete.getText() + ".view.lov;");
            pw.println("import " + txtPaquete.getText() + ".domain." + nombreEntidad + ";");
            pw.println("import " + txtPaquete.getText() + ".service." + nombreEntidad + "Service;");
            pw.println("import cr.ac.una.cgi.sdkuna.view.commons.LOV;");
            pw.println("import cr.ac.una.cgi.sdkuna.view.commons.LOVColumn;");
            pw.println("import cr.ac.una.cgi.sdkuna.view.commons.LOVImpl;");
            pw.println("import java.util.ArrayList;");
            pw.println("import java.util.List;");
            pw.println("import org.springframework.context.annotation.Scope;");
            pw.println("import org.springframework.stereotype.Component;");
            pw.println("import javax.annotation.PostConstruct;");

            pw.println("/** \n* @author JGene \n* @since " + generarFechaActual() + " \n* @version 0.0.1 \n*/");

            pw.println("@Component");
            pw.println("@Scope(\"session\")");
            pw.println("public class " + nombreEntidad + "LOVBean extends LOVImpl<" + nombreEntidad + ", " + nombreEntidad + "Service> implements LOV{");
            pw.println("");
            pw.println("@PostConstruct");
            pw.println("public void init(){");
            pw.println("List<LOVColumn> columns = new ArrayList();");
            if (!listaCampos.isEmpty()) {
                Iterator iterador = listaCampos.listIterator(); //Le solicito a la lista que me devuelva un iterador con todos los el elementos contenidos en ella
                Integer columnumber = 1;
                while (iterador.hasNext()) {
                    Campo c = (Campo) iterador.next(); //Obtengo el elemento contenido                     
                    pw.println("LOVColumn column" + columnumber + " =new LOVColumn(\"" + c.getNombreAtributo() + "\",getI18n(\"" + Utilitarios.firstLetterLower(nombreEntidad) + "_" + c.getNombreAtributo() + "_label\"),true);");
                    columnumber += 1;
                }
                columnumber = 1;
                iterador = listaCampos.listIterator();
                while (iterador.hasNext()) {
                    Campo c = (Campo) iterador.next(); //Obtengo el elemento contenido                     
                    pw.println("columns.add(column" + columnumber + ");");
                    columnumber += 1;
                }
                pw.println("this.setTableColumns(columns);");
            }
            pw.println("}");
            pw.println("}");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString());
        } finally {
            try {
                // Nuevamente aprovechamos el finally para 
                // asegurarnos que se cierra el fichero.
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                JOptionPane.showMessageDialog(null, e2.toString());
            }
        }
    }

    public void GenerarListForm() {
        FileWriter fichero = null;
        PrintWriter pw = null;
        String ruta = "";
        try {
            ruta = txtDirListForm.getText() + Utilitarios.firstLetterLower(nombreEntidad) + "ListForm.xhtml";
            fichero = new FileWriter(ruta);
            pw = new PrintWriter(fichero);
            agregarComentarioInternacionalizacion(Utilitarios.firstLetterLower(nombreEntidad) + "ListForm.xhtml");
            pw.println("<ui:composition template=\"/templates/crud.xhtml\"");
            pw.println("xmlns=\"http://www.w3.org/1999/xhtml\"  ");
            pw.println("xmlns:f=\"http://java.sun.com/jsf/core\"");
            pw.println("xmlns:h=\"http://java.sun.com/jsf/html\"");
            pw.println("xmlns:ui=\"http://java.sun.com/jsf/facelets\"");
            pw.println("xmlns:p=\"http://primefaces.org/ui\"");
            pw.println("xmlns:components=\"http://java.sun.com/jsf/composite/components\">");
            pw.println("");
            pw.println("<ui:define name=\"preRender\">");
            pw.println("<f:event type=\"preRenderView\" listener=\"#{" + Utilitarios.firstLetterLower(nombreEntidad) + "Bean.list()}\"/>");
            pw.println("</ui:define>");
            pw.println("");
            pw.println("<ui:define name=\"title\">#{i18n." + Utilitarios.firstLetterLower(nombreEntidad) + "_list_form_title}</ui:define>");
            agregarLineaInternacionalizacion(Utilitarios.firstLetterLower(nombreEntidad) + "_list_form_title", txtTitulo.getText());
            pw.println("<ui:define name=\"contentCRUD\">");
            pw.println("<components:toolbar id=\"toolbar\"");
            pw.println("editMode=\"false\"");
            pw.println("bean=\"#{" + Utilitarios.firstLetterLower(nombreEntidad) + "Bean}\"");
            pw.println("listForm=\"" + Utilitarios.firstLetterLower(nombreEntidad) + "EditForm\"");
            pw.println("editForm=\"" + Utilitarios.firstLetterLower(nombreEntidad) + "EditForm\"");
            pw.println("backForm=\"" + Utilitarios.firstLetterLower(nombreEntidad) + "ListForm\"");
            pw.println("container=\"noEditTable:dataTable\"/>");
            pw.println("<components:noEditTable id=\"noEditTable\"");
            pw.println("header=\"#{i18n." + Utilitarios.firstLetterLower(nombreEntidad) + "_list_form_table_header}\"");
            agregarLineaInternacionalizacion(Utilitarios.firstLetterLower(nombreEntidad) + "_list_form_table_header", "Lista de " + txtTitulo.getText());
            pw.println("bean=\"#{" + Utilitarios.firstLetterLower(nombreEntidad) + "Bean}\"");
            pw.println("editForm=\"" + Utilitarios.firstLetterLower(nombreEntidad) + "EditForm\"/>");
            pw.println("</ui:define>");
            pw.println("");
            pw.println("</ui:composition>");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString());
        } finally {
            try {
                // Nuevamente aprovechamos el finally para 
                // asegurarnos que se cierra el fichero.
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                JOptionPane.showMessageDialog(null, e2.toString());
            }
        }
    }

    public void GenerarEditForm() {
        FileWriter fichero = null;
        PrintWriter pw = null;
        String ruta = "";
        Boolean detailNoEditTableBoolean = false;
        StringBuilder detailNoEditTable = new StringBuilder();
        try {
            ruta = txtDirEditForm.getText() + Utilitarios.firstLetterLower(nombreEntidad) + "EditForm.xhtml";
            fichero = new FileWriter(ruta);
            pw = new PrintWriter(fichero);

            pw.println("<ui:composition template=\"/templates/crud.xhtml\"");
            pw.println("xmlns=\"http://www.w3.org/1999/xhtml\"  ");
            pw.println("xmlns:f=\"http://java.sun.com/jsf/core\"");
            pw.println("xmlns:h=\"http://java.sun.com/jsf/html\"");
            pw.println("xmlns:ui=\"http://java.sun.com/jsf/facelets\"");
            pw.println("xmlns:p=\"http://primefaces.org/ui\"");
            pw.println("xmlns:sdkuna=\"http://cgi.una.ac.cr/sdkuna\"");
            pw.println("xmlns:una=\"http://una.ac.cr/ui/components\"");
            pw.println("xmlns:pe=\"http://primefaces.org/ui/extensions\"");
            pw.println("xmlns:components=\"http://java.sun.com/jsf/composite/components\">");
            pw.println("");
            if (rbCrud.isSelected()) {//si es un crud agregar el preRender con el metodo find()
                pw.println("<ui:define name=\"preRender\">");
                pw.println("<f:event type=\"preRenderView\" listener=\"#{" + Utilitarios.firstLetterLower(nombreEntidad) + "Bean.find()}\"/>");
                pw.println("</ui:define>");
                pw.println("");
            }
            pw.println("<ui:define name=\"title\">#{i18n." + Utilitarios.firstLetterLower(nombreEntidad) + "_edit_form_title}</ui:define>");
            agregarComentarioInternacionalizacion(Utilitarios.firstLetterLower(nombreEntidad) + "EditForm.xhtml");
            agregarLineaInternacionalizacion(Utilitarios.firstLetterLower(nombreEntidad) + "_edit_form_title", "Mantenimiento de " + txtTitulo.getText());
            pw.println("<ui:define name=\"contentCRUD\">");
            if (rbCrud.isSelected()) {
                pw.println("<components:toolbar id=\"toolbar\"");
                pw.println("editMode=\"true\"");
                pw.println("bean=\"#{" + Utilitarios.firstLetterLower(nombreEntidad) + "Bean}\"");
                pw.println("listForm=\"" + Utilitarios.firstLetterLower(nombreEntidad) + "ListForm\"");
                pw.println("editForm=\"" + Utilitarios.firstLetterLower(nombreEntidad) + "EditForm\"");
                pw.println("backForm=\"" + Utilitarios.firstLetterLower(nombreEntidad) + "ListForm\"");
                pw.println("container=\"panelForm\" ");
                pw.println("/>");
            } else {
                pw.println("<components:detailToolbar id=\"toolbar\"");
                pw.println("bean=\"#{" + Utilitarios.firstLetterLower(nombreEntidad) + "Bean}\"");
                pw.println("listForm=\"xxxxxxxEditForm\"");
                pw.println("editForm=\"" + Utilitarios.firstLetterLower(nombreEntidad) + "EditForm\"");
                pw.println("backForm=\"xxxxxxEditForm\"");
                pw.println("container=\"panelForm\" ");
                pw.println("masterBean=\"#{xxxxxBean}\"");
                pw.println("/>");
            }
            pw.println("<una:panelForm id=\"panelForm\" binding=\"#{panelForm}\" header=\"#{i18n." + Utilitarios.firstLetterLower(nombreEntidad) + "_edit_form_header}\">");
            pw.println("<components:requiredInstructions focus=\"panelForm\"/>");
            agregarLineaInternacionalizacion(Utilitarios.firstLetterLower(nombreEntidad) + "_edit_form_header", "Mantenimiento de " + txtTitulo.getText());
            pw.println("<p:panelGrid columns=\"3\" styleClass=\"una-panelgrid\">");
            Iterator iterador = listaCampos.listIterator();
            while (iterador.hasNext()) {
                Campo c = (Campo) iterador.next(); //Obtengo el elemento contenido                    
                switch (c.getComponente()) {
                    case "p:inputText":
                        pw.println("<p:outputLabel id=\"" + c.getNombreAtributo() + "OutputLabel\" for=\"" + c.getNombreAtributo() + "InputText\"  value=\"#{i18n." + Utilitarios.firstLetterLower(nombreEntidad) + "_" + c.getNombreAtributo() + "_label}\" />");
                        agregarLineaInternacionalizacion(Utilitarios.firstLetterLower(nombreEntidad) + "_" + c.getNombreAtributo() + "_label", c.getEtiqueta());
                        pw.println("<p:inputText id=\"" + c.getNombreAtributo() + "InputText\"\n"
                                + "value=\"#{" + Utilitarios.firstLetterLower(nombreEntidad) + "Bean.entity." + c.getNombreAtributo() + "}\"\n"
                                + "required=\"true\"\n"
                                + "size=\"25\"\n"
                                + "placeholder=\"#{i18n." + Utilitarios.firstLetterLower(nombreEntidad) + "_placeholder_" + c.getNombreAtributo() + "}\">\n"
                                + "</p:inputText>");
                        agregarLineaInternacionalizacion(Utilitarios.firstLetterLower(nombreEntidad) + "_placeholder_" + c.getNombreAtributo(), "Ejemplo: XXXX");
                        pw.println("<p:message id=\"" + c.getNombreAtributo() + "Message\" for=\"" + c.getNombreAtributo() + "InputText\"/>");
                        pw.println("");
                        break;
                    case "sdkuna:inputTextArea":
                        pw.println("<p:outputLabel id=\"" + c.getNombreAtributo() + "OutputLabel\" for=\"" + c.getNombreAtributo() + "InputTextArea\"  value=\"#{i18n." + Utilitarios.firstLetterLower(nombreEntidad) + "_" + c.getNombreAtributo() + "_label}\" />");
                        agregarLineaInternacionalizacion(Utilitarios.firstLetterLower(nombreEntidad) + "_" + c.getNombreAtributo() + "_label", c.getEtiqueta());
                        pw.println("<sdkuna:inputTextArea  id=\"" + c.getNombreAtributo() + "InputTextArea\"\n"
                                + "value=\"#{" + Utilitarios.firstLetterLower(nombreEntidad) + "Bean.entity." + c.getNombreAtributo() + "}\"\n"
                                + "required=\"true\"\n"
                                + "cols=\"60\"\n"
                                + "rows=\"6\"/>");
                        pw.println("<p:message id=\"" + c.getNombreAtributo() + "Message\" for=\"" + c.getNombreAtributo() + "InputTextArea\"/>");
                        pw.println("");
                        break;
                    case "components:inputTextArea":
                        pw.println("<p:outputLabel id=\"" + c.getNombreAtributo() + "OutputLabel\" for=\"" + c.getNombreAtributo() + "InputTextArea\"  value=\"#{i18n." + Utilitarios.firstLetterLower(nombreEntidad) + "_" + c.getNombreAtributo() + "_label}\" />");
                        agregarLineaInternacionalizacion(Utilitarios.firstLetterLower(nombreEntidad) + "_" + c.getNombreAtributo() + "_label", c.getEtiqueta());
                        pw.println(" <components:inputTextArea id=\"" + c.getNombreAtributo() + "InputTextArea\"\n"
                                + "value=\"#{" + Utilitarios.firstLetterLower(nombreEntidad) + "Bean.entity." + c.getNombreAtributo() + "}\"\n"
                                + "placeholder=\"#{i18n." + Utilitarios.firstLetterLower(nombreEntidad) + "_placeholder_" + c.getNombreAtributo() + "}\"\n"
                                + "required=\"true\" />");
                        agregarLineaInternacionalizacion(Utilitarios.firstLetterLower(nombreEntidad) + "_placeholder_" + c.getNombreAtributo(), "Ejemplo: XXXX");
                        pw.println("<p:message id=\"" + c.getNombreAtributo() + "Message\" for=\"" + c.getNombreAtributo() + "InputTextArea\"/>");
                        break;
                    case "p:selectBooleanCheckbox":
                        pw.println("<p:outputPanel/>");
                        pw.println("<p:panelGrid columns=\"2\" styleClass=\"una-panelgrid\">");
                        pw.println("<p:selectBooleanCheckbox id=\"" + c.getNombreAtributo() + "SelectBooleanCheckbox\" value=\"#{" + Utilitarios.firstLetterLower(nombreEntidad) + "Bean.entity." + c.getNombreAtributo() + "}\" />");
                        pw.println("<p:outputLabel id=\"" + c.getNombreAtributo() + "OutputLabel\" for=\"" + c.getNombreAtributo() + "SelectBooleanCheckbox\"  value=\"#{i18n." + Utilitarios.firstLetterLower(nombreEntidad) + "_" + c.getNombreAtributo() + "_label}\" />");
                        agregarLineaInternacionalizacion(Utilitarios.firstLetterLower(nombreEntidad) + "_" + c.getNombreAtributo() + "_label", c.getEtiqueta());
                        pw.println("</p:panelGrid>");
                        pw.println("<p:outputPanel/>");
                        pw.println("");
                        break;
                    case "p:calendar":
                        pw.println("<p:outputLabel id=\"" + c.getNombreAtributo() + "OutputLabel\" for=\"" + c.getNombreAtributo() + "Calendar\"  value=\"#{i18n." + Utilitarios.firstLetterLower(nombreEntidad) + "_" + c.getNombreAtributo() + "_label}\" />");
                        agregarLineaInternacionalizacion(Utilitarios.firstLetterLower(nombreEntidad) + "_" + c.getNombreAtributo() + "_label", c.getEtiqueta());
                        pw.println("<p:calendar id=\"" + c.getNombreAtributo() + "Calendar\"\n"
                                + "value=\"#{" + Utilitarios.firstLetterLower(nombreEntidad) + "Bean.entity." + c.getNombreAtributo() + "}\"\n"
                                + "required=\"true\"\n"
                                + "showOn=\"button\"\n"
                                + "pattern=\"dd/MM/yyyy\"\n"
                                + "navigator=\"true\"\n"
                                + "locale=\"es\"/>");
                        pw.println("<p:message id=\"" + c.getNombreAtributo() + "Message\" for=\"" + c.getNombreAtributo() + "Calendar\"/>");
                        pw.println("");
                        break;
                    case "p:selectOneMenu":
                        pw.println("<p:outputLabel id=\"" + c.getNombreAtributo() + "OutputLabel\" for=\"" + c.getNombreAtributo() + "SelectOneMenu\"  value=\"#{i18n." + Utilitarios.firstLetterLower(nombreEntidad) + "_" + c.getNombreAtributo() + "_label}\" />");
                        agregarLineaInternacionalizacion(Utilitarios.firstLetterLower(nombreEntidad) + "_" + c.getNombreAtributo() + "_label", c.getEtiqueta());
                        pw.println("<p:selectOneMenu id=\"" + c.getNombreAtributo() + "SelectOneMenu\"\n"
                                + "value=\"#{" + Utilitarios.firstLetterLower(nombreEntidad) + "Bean.entity." + c.getNombreAtributo() + "}\"\n"
                                + "required=\"true\"\n"
                                + "converter=\"#{" + c.getNombreAtributo() + "Bean.converter}\">\n"
                                + "<f:selectItem itemLabel=\"#{i18n." + Utilitarios.firstLetterLower(nombreEntidad) + "_" + c.getNombreAtributo() + "_select_label}\"\n"
                                + "itemValue=\"\"\n"
                                + "noSelectionOption=\"\"/>\n"
                                + "<f:selectItems value=\"#{" + Utilitarios.firstLetterLower(nombreEntidad) + "Bean.lista" + Utilitarios.firstLetterUpper(c.getNombreAtributo()) + "()}\"\n"
                                + "var=\"" + c.getNombreAtributo() + "\"\n"
                                + "itemLabel=\"#{" + c.getNombreAtributo() + ".nombre}\"\n"
                                + "itemValue=\"#{" + c.getNombreAtributo() + "}\"/>\n"
                                + "</p:selectOneMenu>");
                        agregarLineaInternacionalizacion(Utilitarios.firstLetterLower(nombreEntidad) + "_" + c.getNombreAtributo() + "_select_label", "Seleccione XX " + c.getEtiqueta().toLowerCase());
                        pw.println("<p:message id=\"" + c.getNombreAtributo() + "Message\" for=\"" + c.getNombreAtributo() + "SelectOneMenu\"/>");
                        pw.println("");
                        break;
                    case "components:detailNoEditTableHorizontal":
                        detailNoEditTableBoolean = true;
                        detailNoEditTable.append("<components:detailNoEditTableHorizontal     id=\"" + c.getNombreAtributo() + "TabNoEditTable\"\n");
                        detailNoEditTable.append("bean=\"#{" + Utilitarios.firstLetterLower(c.getTipoAtributo()) + "Bean}\"\n");
                        detailNoEditTable.append("masterBean=\"#{" + Utilitarios.firstLetterLower(nombreEntidad) + "Bean}\"\n");
                        detailNoEditTable.append("editForm=\"" + Utilitarios.firstLetterLower(c.getTipoAtributo()) + "EditForm\"\n");
                        detailNoEditTable.append("header=\"#{i18n." + Utilitarios.firstLetterLower(nombreEntidad) + "_" + c.getNombreAtributo() + "_label}\"/>\n");
                        agregarLineaInternacionalizacion(Utilitarios.firstLetterLower(nombreEntidad) + "_" + c.getNombreAtributo() + "_label", "Lista de " + c.getEtiqueta());
                        break;
                    case "p:spinner":
                        pw.println("<p:outputLabel id=\"" + c.getNombreAtributo() + "SpinnerOutputLabel\" for=\"" + c.getNombreAtributo() + "Spinner\"  value=\"#{i18n." + Utilitarios.firstLetterLower(nombreEntidad) + "_" + c.getNombreAtributo() + "_label}\" />");
                        agregarLineaInternacionalizacion(Utilitarios.firstLetterLower(nombreEntidad) + "_" + c.getNombreAtributo() + "_label", c.getEtiqueta());
                        pw.println(" <p:spinner id=\"" + c.getNombreAtributo() + "Spinner\"                                                          \n"
                                + "value=\"#{" + Utilitarios.firstLetterLower(nombreEntidad) + "Bean.entity." + c.getNombreAtributo() + "}\"\n"
                                + "min=\"1\" max=\"1000\" \n"
                                + "required=\"false\"\n"
                                + "suffix=\"%\" \n"
                                + "stepFactor=\"1\"\n"
                                + "size=\"25\" \n"
                                + "style=\"text-align: right\"\n"
                                + "styleClass=\"una-spinner-secuencia\" \n"
                                + "placeholder=\"#{i18n." + Utilitarios.firstLetterLower(nombreEntidad) + "_placeholder_" + c.getNombreAtributo() + "}\">"
                                + "</p:spinner>");
                        agregarLineaInternacionalizacion(Utilitarios.firstLetterLower(nombreEntidad) + "_placeholder_" + c.getNombreAtributo(), "Ejemplo: XXXX");
                        pw.println("<p:message id=\"" + c.getNombreAtributo() + "Message\" for=\"" + c.getNombreAtributo() + "Spinner\"/>");
                        pw.println("");
                        break;
                    case "p:editor":
                        pw.println(" <p:editor id=\"" + c.getNombreAtributo() + "Editor\"\n"
                                + "value=\"#{" + Utilitarios.firstLetterLower(nombreEntidad) + "Bean.entity." + c.getNombreAtributo() + "}\"\n"
                                + "style=\"width: 100%\"/>");
                        pw.println("");
                        break;
                    case "una:inputNumber":
                        pw.println("<p:outputLabel id=\"" + c.getNombreAtributo() + "OutputLabel\" for=\"" + c.getNombreAtributo() + "InputNumber\"  value=\"#{i18n." + Utilitarios.firstLetterLower(nombreEntidad) + "_" + c.getNombreAtributo() + "_label}\" />");
                        agregarLineaInternacionalizacion(Utilitarios.firstLetterLower(nombreEntidad) + "_" + c.getNombreAtributo() + "_label", c.getEtiqueta());
                        pw.println("<una:inputNumber id=\"" + c.getNombreAtributo() + "InputNumber\"\n"
                                + "                                                 value=\"#{" + Utilitarios.firstLetterLower(nombreEntidad) + "Bean.entity." + c.getNombreAtributo() + "}\"\n"
                                + "                                                 required=\"true\"\n"
                                + "                                                 disabled=\"false\"\n"
                                + "                                                 symbol=\"#{simboloMonedaBean.simboloLocal}\"\n"
                                + "                                                 maxValue=\"9223372036854775807\"\n"
                                + "                                                 minValue=\"-9223372036854775807\"\n"
                                + "                                                 dir=\"RTL\"\n"
                                + "                                                 maxlength=\"50\"\n"
                                + "                                                 decimalSeparator=\",\" \n"
                                + "                                                 thousandSeparator=\".\">                                           \n"
                                + "                                </una:inputNumber>");
                        pw.println("<p:message id=\"" + c.getNombreAtributo() + "Message\" for=\"" + c.getNombreAtributo() + "InputNumber\"/>");

                        break;

                    case "p:autoComplete":
                        pw.println("<p:outputLabel id=\"" + c.getNombreAtributo() + "OutputLabel\" for=\"" + c.getNombreAtributo() + "AutoComplete\"  value=\"#{i18n." + Utilitarios.firstLetterLower(nombreEntidad) + "_" + c.getNombreAtributo() + "_label}\" />");
                        agregarLineaInternacionalizacion(Utilitarios.firstLetterLower(nombreEntidad) + "_" + c.getNombreAtributo() + "_label", c.getEtiqueta());
                        pw.println("<p:outputPanel id=\"" + c.getNombreAtributo() + "OutputPanel\">");
                        pw.println("<una:autoCompletePaginator id=\"" + c.getNombreAtributo() + "AutoComplete\"\n"
                                + "dropdown=\"true\"\n"
                                + "paginator=\"true\"\n"
                                + "paginationRows=\"10\"\n"
                                + "value=\"#{" + Utilitarios.firstLetterLower(nombreEntidad) + "Bean.entity." + c.getNombreAtributo() + "}\"\n"
                                + "var=\"" + c.getNombreAtributo() + "\"\n"
                                + "itemLabel=\"#{" + c.getNombreAtributo() + ".nombre}\"\n"
                                + "itemValue=\"#{" + c.getNombreAtributo() + "}\"\n"
                                + "completeMethod=\"#{" + Utilitarios.firstLetterLower(nombreEntidad) + "Bean.complete" + Utilitarios.firstLetterUpper(c.getNombreAtributo()) + "}\"\n"
                                + "converter=\"#{" + c.getNombreAtributo() + "Bean.converter}\"\n"
                                + "forceSelection=\"true\"\n"
                                + "scrollHeight=\"200\"\n"
                                + "noSelectedOption=\"true\"\n"
                                + "noSelectedLabel=\"#{i18n." + Utilitarios.firstLetterLower(nombreEntidad) + "_" + c.getNombreAtributo() + "_select_label}\" \n"
                                + "onNoSelectedOption=\"#{" + Utilitarios.firstLetterLower(nombreEntidad) + "Bean.handleClear" + Utilitarios.firstLetterUpper(c.getNombreAtributo()) + "()}\"\n"
                                + "required=\"true\"\n"
                                + "styleClass=\"una-autocomplete-lov\">"
                                + "\n"
                                + "</una:autoCompletePaginator>\n"
                                + "<components:dialogFrameworkData id=\"" + c.getNombreAtributo() + "ListDialog\"\n"
                                + "lOVBean=\"#{" + Utilitarios.firstLetterLower(c.getNombreAtributo()) + "LOVBean}\"\n"
                                + "target=\"#{" + Utilitarios.firstLetterLower(nombreEntidad) + "Bean.entity." + c.getNombreAtributo() + "}\"\n"
                                + "title=\"#{i18n." + Utilitarios.firstLetterLower(nombreEntidad) + "_" + c.getNombreAtributo() + "_LOV_title}\"\n"
                                + "update=\"" + c.getNombreAtributo() + "AutoComplete\" />\n"
                                + "</p:outputPanel>");
                        agregarLineaInternacionalizacion(Utilitarios.firstLetterLower(nombreEntidad) + "_" + c.getNombreAtributo() + "_select_label", "Seleccione XX " + c.getEtiqueta().toLowerCase());
                        agregarLineaInternacionalizacion(Utilitarios.firstLetterLower(nombreEntidad) + "_" + c.getNombreAtributo() + "_LOV_title", "Lista de " + c.getEtiqueta());
                        pw.println("<p:message id=\"" + c.getNombreAtributo() + "Message\" for=\"" + c.getNombreAtributo() + "AutoComplete\"/>");
                        pw.println("");
                        break;
                }
            }
            pw.println("</p:panelGrid> ");
            if (detailNoEditTableBoolean) {//si hay un detalle lo concatena
                pw.println(detailNoEditTable.toString());
            }
            pw.println("</una:panelForm>");
            pw.println("</ui:define>");
            pw.println("</ui:composition>");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString());
        } finally {
            try {
                // Nuevamente aprovechamos el finally para 
                // asegurarnos que se cierra el fichero.
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                JOptionPane.showMessageDialog(null, e2.toString());
            }
        }
    }

    public void agregarLineaInternacionalizacion(String llave, String valor) {
        i18n.append("insert into i18n (version, usuario_creacion, fecha_creacion, fecha_modificacion, usuario_modificacion, campo_configurable, idioma, llave, valor, id_i18n) \nvalues (0, 5, sysdate, sysdate, 5, NULL, 'es', '"
                + llave + "', '" + valor + "', SQ_I18N.nextval);\n");
    }

    public void agregarComentarioInternacionalizacion(String cadena) {//
        i18n.append("-----------" + cadena + "---------------------\n");
    }

    public void agregarRecurso(String nombre, String valor) {
        i18n.append("insert into recurso (version, usuario_creacion, fecha_creacion, fecha_modificacion, usuario_modificacion, campo_configurable, estado, link_ayuda, nombre, notas, recurso, sequencia, tipo_recurso, visible, id_recurso)\n"
                + "values (0, 5, 5, sysdate, 5, null, 1, null, " + nombre + ", NULL, NULL, 1, 1, 1, null); \n");
    }

    public void GenerarInternacionalizacion() {
        FileWriter fichero = null;
        PrintWriter pw = null;
        String ruta = "";
        try {
            ruta = txtDirScript.getText() + nombreEntidad + "_i18n.sql";
            fichero = new FileWriter(ruta);
            pw = new PrintWriter(fichero);
            pw.println(i18n);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString());
        } finally {
            try {
                // Nuevamente aprovechamos el finally para 
                // asegurarnos que se cierra el fichero.
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                JOptionPane.showMessageDialog(null, e2.toString());
            }
        }
    }

    private String generarFechaActual() {
        Calendar cal = Calendar.getInstance();
        cal.setTime(new Date());
        SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
        return format.format(cal.getTime());
    }

    //</editor-fold>

    private void btnNuevaConexionnuevaConexion(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevaConexionnuevaConexion
        try {
            limpiaConexion();
            buscaConexiones();
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(JGene.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TransformerException ex) {
            Logger.getLogger(JGene.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnNuevaConexionnuevaConexion

    private void btnGuardarConexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarConexionActionPerformed
        Conexion conexion = new Conexion();
        asignaConexion(conexion);
        ConfConexion conf = new ConfConexion();
        try {
            if (conexion.getNombre().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "El nombre de la conexion es requeridad");
            } else if (conexion.getURL().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "La direcci坦n URL es requerida");
            } else if (conexion.getUsuario().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "El usuario es requerido");
            } else if (conexion.getContrasena().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "La contrase単a es requerido");
            } else {
                if (jListConexiones.getSelectedIndex() == -1) {
                    conf.nuevaConexion(conexion);
                } else {
                    conf.modificarConexion(conexion, jListConexiones.getSelectedIndex());
                }

                buscaConexiones();
            }
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(JGene.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TransformerException ex) {
            Logger.getLogger(JGene.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SAXException ex) {
            Logger.getLogger(JGene.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(JGene.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGuardarConexionActionPerformed

    private void btnNuevoCampoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoCampoActionPerformed
        Campo campo = new Campo();
        campo.setSelected(true);
        listaCampos.add(campo);
        CamposTableModel model = new CamposTableModel(listaCampos);
        jTable4.repaint();
        jTable4.addNotify();
        jTable4.changeSelection(listaCampos.size(), 1, false, false);
    }//GEN-LAST:event_btnNuevoCampoActionPerformed

    private void seleccionaDirectorio(int opcion) {
        int returnVal = fchDirectorio.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fchDirectorio.getSelectedFile();
            try {
                switch (opcion) {
                    case 1:
                        txtDirDomain.setText(file.getAbsolutePath() + "/");
                        break;
                    case 2:
                        txtDirRepository.setText(file.getAbsolutePath() + "/");
                        break;
                    case 3:
                        txtDirService.setText(file.getAbsolutePath() + "/");
                        break;
                    case 4:
                        txtDirBean.setText(file.getAbsolutePath() + "/");
                        break;
                    case 5:
                        txtDirLOVBean.setText(file.getAbsolutePath() + "/");
                        break;
                    case 6:
                        txtDirEditForm.setText(file.getAbsolutePath() + "/");
                        break;
                    case 7:
                        txtDirListForm.setText(file.getAbsolutePath() + "/");
                        break;
                    case 8:
                        txtDirScript.setText(file.getAbsolutePath() + "/");
                        break;
                }
            } catch (Exception ex) {
                System.out.println("problem accessing file" + file.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }

    public synchronized static String SQLTablas(String tabla) {
        String sql = "select table_name from DBA_TABLES where table_name='" + tabla + "'";
        return sql;
    }//

    public synchronized static String SQLColumnas() {
        String sql = "select column_name, data_type,data_length , nullable from all_tab_columns where table_name = ? order by column_id";
        return sql;
    }//

    public synchronized static String SQLPk() {
        String sql = "select uc.table_name, ucc.column_name,tc.data_type from user_cons_columns ucc join user_constraints uc  on ucc.constraint_name=uc.constraint_name join all_tab_columns tc on tc.column_name = ucc.column_name where uc.constraint_type='P' and  uc.TABLE_NAME=?";
        return sql;
    }//
    private void btnFChDomainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFChDomainActionPerformed
        seleccionaDirectorio(1);
    }//GEN-LAST:event_btnFChDomainActionPerformed

    private void btnFChRepositoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFChRepositoryActionPerformed
        seleccionaDirectorio(2);
    }//GEN-LAST:event_btnFChRepositoryActionPerformed

    private void btnFChServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFChServiceActionPerformed
        seleccionaDirectorio(3);
    }//GEN-LAST:event_btnFChServiceActionPerformed

    private void btnFChBeanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFChBeanActionPerformed
        seleccionaDirectorio(4);
    }//GEN-LAST:event_btnFChBeanActionPerformed

    private void btnFChLOVBeaNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFChLOVBeaNActionPerformed
        seleccionaDirectorio(5);
    }//GEN-LAST:event_btnFChLOVBeaNActionPerformed

    private void btnFChEditFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFChEditFormActionPerformed
        seleccionaDirectorio(6);
    }//GEN-LAST:event_btnFChEditFormActionPerformed

    private void btnFChListFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFChListFormActionPerformed
        seleccionaDirectorio(7);
    }//GEN-LAST:event_btnFChListFormActionPerformed

    private void btnFChScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFChScriptActionPerformed
        seleccionaDirectorio(8);
    }//GEN-LAST:event_btnFChScriptActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        try {
            if (jListConexiones.getSelectedIndex() == -1) {
                JOptionPane.showMessageDialog(null, "Es necesario seleccionar una conexi坦n");
            } else {
                txtTabla.setText(txtTabla.getText().toUpperCase());
                Buscar();
            }
        } catch (ExceptionConnection ex) {
            Logger.getLogger(JGene.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnEliminarConexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarConexActionPerformed
        Conexion conexion = new Conexion();
        asignaConexion(conexion);
        ConfConexion conf = new ConfConexion();
        try {
            if (jListConexiones.getSelectedIndex() == -1) {
                JOptionPane.showMessageDialog(null, "Seleccione la conexi坦n que desea eliminar");
            } else {
                conf.eliminarConexion(jListConexiones.getSelectedIndex());
                limpiaConexion();
                buscaConexiones();
            }
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(JGene.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TransformerException ex) {
            Logger.getLogger(JGene.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnEliminarConexActionPerformed

    private void btnGenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarActionPerformed
        try {
            Generar();
        } catch (ExceptionConnection ex) {
            Logger.getLogger(JGene.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGenerarActionPerformed

    private void jListDirectoriosValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListDirectoriosValueChanged
        if (!listaPaqueteDirectorios.isEmpty()) {
            Iterator iterador = listaPaqueteDirectorios.listIterator();
            JList list = (JList) evt.getSource();
            String selected = list.getSelectedValue().toString();
            while (iterador.hasNext()) {
                PaqueteDirectorio pkg = (PaqueteDirectorio) iterador.next();
                if (pkg.getNombre() == selected) {
                    paqueteDirectorioActivo = pkg;
                }
            }
            actualizaPaqueteDirectorio();
        }   // TODO add your handling code here:
    }//GEN-LAST:event_jListDirectoriosValueChanged

    private void btnGuardarConfArchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarConfArchActionPerformed
        PaqueteDirectorio paqueteDirectorio = new PaqueteDirectorio();
        asignaDirectorio(paqueteDirectorio);
        ConfDirectorio conf = new ConfDirectorio();
        try {
            if (jListDirectorios.getSelectedIndex() == -1) {
                conf.nuevoPaqueteDirectorio(paqueteDirectorio);
            } else {
                conf.modificarPaqueteDirectorio(paqueteDirectorio, jListDirectorios.getSelectedIndex());
            }
            buscaDirectorios();

        } catch (ParserConfigurationException ex) {
            Logger.getLogger(JGene.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TransformerException ex) {
            Logger.getLogger(JGene.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SAXException ex) {
            Logger.getLogger(JGene.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(JGene.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGuardarConfArchActionPerformed

    private void btnEliminarPaqueteDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarPaqueteDirActionPerformed
        PaqueteDirectorio paqueteDirectorio = new PaqueteDirectorio();
        ConfDirectorio conf = new ConfDirectorio();
        try {
            if (jListDirectorios.getSelectedIndex() == -1) {
                JOptionPane.showMessageDialog(null, "Seleccione el paquete que desea elimnar!");
            } else {
                conf.eliminarPaqueteDirectorio(jListDirectorios.getSelectedIndex());
                limpiaPaqueteDirectorio();
                buscaDirectorios();
            }
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(JGene.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TransformerException ex) {
            Logger.getLogger(JGene.class.getName()).log(Level.SEVERE, null, ex);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_btnEliminarPaqueteDirActionPerformed

    private void btnPaqueteDirectorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPaqueteDirectorioActionPerformed
        try {
            limpiaPaqueteDirectorio();
            buscaDirectorios();
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(JGene.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TransformerException ex) {
            Logger.getLogger(JGene.class.getName()).log(Level.SEVERE, null, ex);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_btnPaqueteDirectorioActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JGene.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JGene.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JGene.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JGene.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new JGene().setVisible(true);
                } catch (ExceptionConnection ex) {
                    Logger.getLogger(JGene.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AtributoPanel;
    private javax.swing.ButtonGroup TipoBeanbuttonGroup;
    private javax.swing.JPanel archivosPanel;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminarConex;
    private javax.swing.JButton btnEliminarPaqueteDir;
    private javax.swing.JButton btnFChBean;
    private javax.swing.JButton btnFChDomain;
    private javax.swing.JButton btnFChEditForm;
    private javax.swing.JButton btnFChLOVBeaN;
    private javax.swing.JButton btnFChListForm;
    private javax.swing.JButton btnFChRepository;
    private javax.swing.JButton btnFChScript;
    private javax.swing.JButton btnFChService;
    private javax.swing.JToggleButton btnGenerar;
    private javax.swing.JButton btnGuardarConexion;
    private javax.swing.JButton btnGuardarConfArch;
    private javax.swing.JButton btnNuevaConexion;
    private javax.swing.JButton btnNuevoCampo;
    private javax.swing.JButton btnPaqueteDirectorio;
    private javax.swing.JComboBox cboRelacion;
    private javax.swing.JComboBox cboTipoAtributo;
    private javax.swing.JComboBox cboTipoComponente;
    private javax.swing.JCheckBox chkBean;
    private javax.swing.JCheckBox chkDomain;
    private javax.swing.JCheckBox chkEditForm;
    private javax.swing.JCheckBox chkListForm;
    private javax.swing.JCheckBox chkLovBean;
    private javax.swing.JCheckBox chkRepository;
    private javax.swing.JCheckBox chkScripts;
    private javax.swing.JCheckBox chkService;
    private javax.swing.JPanel conexionPanel;
    private javax.swing.JFileChooser fchDirectorio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList jListConexiones;
    private javax.swing.JList jListDirectorios;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable4;
    private javax.swing.JTabbedPane pestanasTabPanel;
    private javax.swing.JRadioButton rbAser;
    private javax.swing.JRadioButton rbCrud;
    private javax.swing.JPasswordField txtContrase単a;
    private javax.swing.JTextField txtDirBean;
    private javax.swing.JTextField txtDirDomain;
    private javax.swing.JTextField txtDirEditForm;
    private javax.swing.JTextField txtDirLOVBean;
    private javax.swing.JTextField txtDirListForm;
    private javax.swing.JTextField txtDirRepository;
    private javax.swing.JTextField txtDirScript;
    private javax.swing.JTextField txtDirService;
    private javax.swing.JTextField txtEntidad;
    private javax.swing.JTextField txtNomConexion;
    private javax.swing.JTextField txtPaquete;
    private javax.swing.JTextField txtTabla;
    private javax.swing.JTextField txtTitulo;
    private javax.swing.JTextField txtURLConexion;
    private javax.swing.JTextField txtUsuario;
    // End of variables declaration//GEN-END:variables

}
